// Interface que define a estrutura de um município
// TypeScript usa interfaces para definir contratos de tipos
// Isso garante que todos os municípios sigam a mesma estrutura
export interface Municipio {
  id: string;      // Identificador único do município
  nome: string;    // Nome do município
  path: string;    // Path SVG que define o formato do município no mapa
  // Propriedades opcionais que podem ser adicionadas no futuro
  // população?: number; // Número de habitantes
  // área?: number; // Área em km²
  // etc...
}

// Record é um tipo utilitário do TypeScript
// Record<string, Municipio> significa:
// - Chaves são strings (IDs dos municípios)
// - Valores são objetos do tipo Municipio
export const municipios: Record<string, Municipio> = {
  // Exemplo de um município
  // A chave é o ID do município
  // O valor é um objeto que segue a interface Municipio
  "4300109": {
    id: "4300109",      // Identificador único do município
    nome: "Alegrete",    // Nome do município
    path: "M 100 100 L 200 100 L 200 200 L 100 200 Z",    // Path SVG que define o formato do município no mapa
  },
  // Outros municípios seguiriam o mesmo padrão
  // Cada município tem seu próprio path SVG que define sua forma no mapa
  cidade1: {
    id: "cidade1",
    nome: "Cidade 1",
    // Path SVG que define a forma do município
    // Este é um exemplo de path complexo que desenha a forma do município
    path: "m 373.96009,288.18744 c -0.54126,-0.20896 -1.34054,-0.88183 -1.77618,-1.49528 -1.19383,-1.68108 -6.12595,-2.84162 -9.47956,-2.23054 -1.56737,0.2856 -3.08315,0.45985 -3.3684,0.38723 -0.28525,-0.0726 -1.09605,0.17698 -1.80178,0.55468 -1.9077,1.02097 -10.8669,1.59804 -11.4007,0.73433 -0.6488,-1.04977 1.5124,-4.01384 2.61743,-3.5898 1.00906,0.38722 1.04046,0.2307 1.17747,-5.86947 0.0684,-3.04636 -0.19226,-4.09076 -1.32644,-5.31432 -0.95641,-1.03178 -1.22409,-1.81896 -0.83013,-2.44118 0.3198,-0.5051 0.58598,-2.02548 0.5915,-3.37862 0.009,-2.14068 0.20989,-2.46026 1.54854,-2.46026 1.9376,0 4.0116,-2.20434 3.45029,-3.66711 -0.23041,-0.60043 -0.0626,-1.52104 0.3729,-2.04579 0.88218,-1.06296 1.88968,-6.5043 1.85764,-10.03279 -0.017,-1.86871 0.31059,-2.44894 1.75927,-3.11634 2.40493,-1.10792 4.758,-1.03395 5.2177,0.16402 0.24347,0.63447 1.25826,0.98411 2.85628,0.98411 2.86915,0 4.65451,-1.98179 4.17212,-4.63115 -0.16038,-0.88084 0.29126,-2.72916 1.00364,-4.10737 1.13633,-2.19842 1.37096,-2.3594 1.91244,-1.31214 0.78954,1.527 2.40524,6.24043 2.43352,7.0992 0.0119,0.36131 0.49686,1.33542 1.0777,2.16468 1.41995,2.02726 4.49546,1.42125 4.49546,-0.8858 0,-2.24119 1.09232,-2.54284 1.5171,-0.41897 0.4765,2.38255 2.86982,3.69881 5.14948,2.83208 1.1656,-0.44316 1.92131,-0.41913 2.4173,0.0769 0.51512,0.51511 1.15935,0.52211 2.25158,0.0245 1.44501,-0.65839 1.53402,-0.56448 1.60249,1.69077 0.0399,1.31334 -0.35378,2.86326 -0.87478,3.44426 -1.09048,1.21608 -0.44549,3.65608 1.36326,5.15721 0.8912,0.73963 1.0093,1.53708 0.62757,4.23749 -0.25863,1.82953 -0.43324,3.62164 -0.38804,3.98248 0.0452,0.36084 0.17229,1.86992 0.28241,3.35352 0.15908,2.14335 0.83608,3.40468 3.29574,6.14042 l 3.09554,3.44298 1.29807,-1.54793 c 1.04341,-1.24424 1.41502,-1.37055 1.89413,-0.64379 0.32783,0.49727 0.89191,0.72128 1.25353,0.49779 0.37257,-0.23026 0.84293,0.65729 1.08543,2.04818 0.29558,1.69533 1.18026,3.111 2.86024,4.57699 l 2.43229,2.12247 -1.96821,0.0853 c -2.93394,0.12716 -4.52009,-0.10961 -5.21576,-0.77859 -0.9275,-0.8919 -4.80174,-0.72487 -5.12001,0.22074 -0.20837,0.61912 -0.50312,0.63737 -1.20279,0.0744 -0.69403,-0.55838 -1.91535,-0.53997 -4.8632,0.0733 -2.24027,0.4661 -4.24743,0.57591 -4.65822,0.25485 -0.42402,-0.33142 -1.56399,-0.144 -2.7633,0.4543 -1.12284,0.56014 -3.54669,1.25637 -5.38634,1.54718 -1.83965,0.29081 -3.68133,0.86526 -4.09262,1.27656 -0.81313,0.81313 -0.98423,0.83156 -2.4536,0.2643 z"
  }
}; 